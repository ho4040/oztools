<!DOCTYPE HTML>

<head>

	<meta charset="utf-8">

	<link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/themes/ui-lightness/jquery-ui.css">
	<script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
	<script src="https://code.jquery.com/ui/1.11.3/jquery-ui.js"></script>
	<link rel="stylesheet" type="text/css" href="site.css">

	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-59101417-1', 'auto');
	  ga('send', 'pageview');
	</script>
	
	<script type="text/javascript" src="https://101.livere.co.kr/js/livere8_lib.js" charset="utf-8"></script>

	<style>
		.scr {
			visibility: hidden;
			position: absolute;
		}
	</style>
</head>

<body>
	<h1>COLOR MINER</h1>
	<img src="http://i.imgur.com/4dTJT6D.jpg" style='border-radius: 10px' ><br>
	그림을 대표하는 색상을 찾아냅니다.컴퓨터 성능에 따라서 시간이 좀 오래 걸릴 수도 있습니다.<br>
	최대샘플 값을 낮추면 정확도는 떨어지지만 빨리 결과를 볼 수 있습니다.<br>
	Find the colors that represent the picture. Large image take a long time to get result.<br>
	you can make it faster via reduce Maximum sample number.<br>
	<ol>
	<li>그림파일을 불러옵니다.(Load image)</li>
	<li>썸네일을 목록에서 선택합니다.(Select thumbnail from the list below)</li>
	</ol>
	<br>
	<input type="file" id="files" name="files[]" multiple /><br>
	<div id="dragDiv" class="dragBox">	
		<output id="list"><p id="dragLabel" class="centerP">파일을 이곳에 드래그하세요(Drag files here)</p></output>
	</div>
	<table cellspacing=0 cellpadding=1 class="optionBox">
		<tr>
			<td align="right">채굴할 색상수(Number of color)</td>
			<td><input type="number" id="kValue" name="stepper1" min="1" max="999" value="5" /></td>
		
			<td align="right">최대샘플(Maximum sample number)</td>
			<td><input type="number" id="sampleNum" name="stepper1" min="1000" max="1000000" value="2000" /></td>
		</tr>
	</table>
	<span id="result"></span><br>

	<canvas id="myCanvas"  class="scr" /></canvas>

	<script>
		var emptyList = true;
		////////////////////////////////////////////////////////////
		//on File select
		////////////////////////////////////////////////////////////
		function handleFileSelect(evt){
		
			var files = evt.target.files || evt.dataTransfer.files;
			
			if(evt.type=="change"){ //by fileSelect Input
			}
			else{					//by Drag and drop
				FileDragHover(evt);
				document.getElementById("files").innerHTML = "파일" + files.length + "개";
			}
			
			if(emptyList)
				document.getElementById('list').innerHTML = "";
			
			// Loop through the FileList and render image files as thumbnails.
			for (var i = 0, f; f = files[i]; i++)
			{
				// Only process image files.
				if (!f.type.match('image.*')) {
					continue;
				}

				var reader = new FileReader();
				var theFile = f; //for closure
				reader.onload = function(e){
					var span = document.createElement('span');
					var img = document.createElement('img');
					img.className = "thumb";
					img.src = e.target.result;
					img.title = "클릭하면 마이닝을 시작합니다."
					
					img.addEventListener("click", onImageSelect);
					span.appendChild(img);
					document.getElementById('list').insertBefore(span, null);
					emptyList = false;
				};
				
				// Read in the image file as a data URL.
				reader.readAsDataURL(f);
				
			}
		}
		
		////////////////////////////////////////////////////////////
		//load Image
		////////////////////////////////////////////////////////////
		function loadImage(dataURL){
			var canvas = document.getElementById("myCanvas");
			var imgObj = new Image();
			var sampleNum = Number(document.getElementById("sampleNum").value);
			imgObj.onload  = function( e ){
				
				var factor = 1;
				while( imgObj.height*factor*imgObj.width*factor > sampleNum)
					factor *= 0.9;
				
				canvas.width  = imgObj.width*factor;
				canvas.height  = imgObj.height*factor;
				var context = canvas.getContext("2d");
				context.drawImage(imgObj, 0,0, imgObj.width*factor, imgObj.height*factor);
				//canvas.toDataURL("image/png");
				runImageProc();
				
				
			}
			imgObj.src = dataURL;
		}
		
		////////////////////////////////////////////////////////////
		//convert image data
		////////////////////////////////////////////////////////////
		function runImageProc(){
			var canvas = document.getElementById("myCanvas");
			var w = canvas.width;
			var h = canvas.height;
			var ctx = canvas.getContext("2d");
			var imgData = ctx.getImageData(0, 0, w, h );
			
			calculate(w,h,imgData, ctx);
			
		}
		
		////////////////////////////////////////////////////////////
		//on roll over
		////////////////////////////////////////////////////////////
		function FileDragHover(e) {
			e.stopPropagation();
			e.preventDefault();
			e.currentTarget.className = (e.type == "dragover" ? "dragBoxHover" : "dragBox");
		}
		
		////////////////////////////////////////////////////////////
		//on Image Select
		////////////////////////////////////////////////////////////
		var curImg = null;
		function onImageSelect(e){
			if(curImg != null){
				curImg.className = "thumb";
			}
			e.currentTarget.className = "thumbSelected";
			curImg = e.currentTarget;
			
			loadImage(curImg.src);
		}
		
		function getDist( p1, p2)
		{
			var x = p1[0]-p2[0];
			var y = p1[1]-p2[1];
			var z = p1[2]-p2[2];
			return x*x+y*y+z*z
		}
		
		function calcCenters( data, links, K )
		{
			var centers = [];
			for( j=0; j<K; j++){
				var x=y=z=0;
				var num = 0;
				for( i=0;i<links.length; i++){
					var category = links[i]
					if(category == j){
						x += data[i][0];
						y += data[i][1];
						z += data[i][2];
						num++;
					}
				}
				x /= num;
				y /= num;
				z /= num;
				centers.push([x,y,z]);
			}
			return centers;
		}
		
		function calcLinks( data, centers ){
			var K = centers.length;
			var links = [];
			var num = data.length;
			links.length = num;
			
			for( i=0; i<num; i++){
				var minDist = 195076;
				for( j=0; j<K; j++ ){
					var dist = getDist( data[i], centers[j] );
					if(dist < minDist){
						links[i] = j;
						minDist = dist;
					}
				}
			}
			return links;
		}
		
		function isSamePoints( vec1, vec2 ){
			if(vec1.length != vec2.length)
				return false;
			for( i=0;i<vec1.length;i++){
				var dist = getDist(vec1[i], vec2[i])
				if( dist >= 1)
					return false;
			}
			return true;
		}
		
		function getMiddle( pt1, pt2 ){
			var x = (pt1[0] + pt2[0])/2;
			var y = (pt1[1] + pt2[1])/2;
			var z = (pt1[2] + pt2[2])/2;
			return [x,y,z];
		}
		
		function asHex( color ){
			var temp = [];
			for( var i=0;i<3;i++){
				var str = Math.floor(color[i]).toString(16);
				if(str.length == 1)
					str = "0"+str;
				temp.push(str)
			}
			return temp.join("");
		}
		
		function clone( c ){
			return [c[0], c[1], c[2]];
		}
		
		var timerId = null
		function calculate(w, h, imgData, ctx){
			
			var startTime  = new Date
			var phase = 0;
			var K = 0;
			var data=[];
			var set = {};
			var pdata = [];
			var links = [];
			var centers = [];
			var newCenters = [];
			var loopNum = 0;
			
			if(timerId !=null)
				clearInterval(timerId);
			
			timerId = setInterval(function(){
			
				var str = "";
				switch(phase){
					case 0: str= "Get primitive sample"; break;
					case 1: str= "Remove doubled samples"; break;
					case 2: str= "Merge adjacent samples "+pdata.length; break;
					case 3: str= "Set categories"; break;
					case 4: str= "K mean clustering "+loopNum; break;
					case 5: str= "Done"; break;
				}
				document.getElementById("result").innerHTML = "<p class='progress'>PROGRESS : " + str +"</p>";
				
				switch(phase){
				
					case 0: //get primitive data
						K = Number(document.getElementById("kValue").value)
						data.length = 0
						for(y=0;y<h;y++){
							for(x=0;x<w;x++){
								var index = (x + y * imgData.width) * 4
								var r = imgData.data[index+0]
								var g = imgData.data[index+1]
								var b = imgData.data[index+2]
								data.push([r,g,b])
							}
						}
						phase = 1
					break;
					
					case 1: //remove doubled data
						for( i=0;i<data.length;i++){
							var key = asHex(data[i])
							if(set[key] == null)
								set[key] = clone(data[i])
						}
						for( k in set ){
							pdata.push( set[k] )
						}
						phase = 2
					break;
					
					case 2: //merge near elements
						//get nearest pair of point
						var minDist = 195076;
						var pair = [];
						for( i=0; i<pdata.length-1; i++ ){
							for( j=i+1; j<pdata.length; j++){
								var dist = getDist(pdata[i], pdata[j]);
								if(dist < minDist){
									pair = [i,j];
									minDist = dist;
								}
							}
						}
						
						//remake sample 
						var newData = [];
						for( var i=0; i<pdata.length; i++){
							if(i == pair[0] || i == pair[1])
								continue;
							newData.push( pdata[i] );
						}
						//with merged point
						newData.push( getMiddle( pdata[pair[0]], pdata[pair[1]]) );
						pdata = newData;
						
						if(pdata.length <= K)
							phase = 3
					break;
					
					case 3: //set categories
						for( i=0; i<pdata.length;i++)
							newCenters.push(pdata[i])
						phase = 4
					break;
					
					case 4: //K mean clustering.
						if( isSamePoints( newCenters, centers ) == false ){
							centers = newCenters;
							links = calcLinks( data, centers );
							newCenters = calcCenters( data, links, K);
							loopNum++;
						}else{
							phase = 5
						}
					break;
					
					case 5: //end
						var finTime  = new Date
						var duration = finTime.getTime() - startTime.getTime()
						var results = [];
						for( i=0; i<K; i++){
							var colorStr = "#"+	asHex(centers[i]);
							colorStr = colorStr.toUpperCase()
							results.push("<span class='resultBox' style='background-color:"+colorStr+"'><font color='"+colorStr+"'>"+colorStr+"</font></span>");
						}
						
						document.getElementById("result").innerHTML = [
							"<b>RESULT</b><BR>",
							results.join("\n"),
							"<HR>",
							"Total Sample:"+ data.length,
							"K mean cluster loop:"+loopNum,
							"Process time:"+duration+"ms"
							].join("<BR>");
						
						clearInterval(timerId); //remove timer
					break;
				}
				
			}, 0);
			
		}
		

		////////////////////////////////////////////////////////////
		//initialize codes
		////////////////////////////////////////////////////////////
		
		document.getElementById('files').addEventListener('change', handleFileSelect, false);
		var filedrag = document.getElementById("dragDiv");
		filedrag.addEventListener("dragover", FileDragHover, false);
		filedrag.addEventListener("dragleave", FileDragHover, false);
		filedrag.addEventListener("drop", handleFileSelect, false);	
		//window.addEventListener("resize", onWindowResize);
		//onWindowResize(null);
		

		
	</script>

	<!-- 2. 아래 코드는 라이브리를 설치하시고자 하는 위치에 삽입하시기 바랍니다. -->
	<div id="livereContainer">
		<script type="text/javascript">
			var consumer_seq 	= "200";
			var livere_seq 		= "22695";
			var smartlogin_seq 	= "228";

			var title = "colorMiner"
			var refer = "http://ho4040.github.io/oztools/index.htm?p=colorMiner"

			livereReply = new Livere( livere_seq , refer , title );
			livereLib.start();
		</script>
	</div>

	<p class="bottom">
	by OZTOOLS( <a href="http://ho4040.github.io/oztools/">http://ho4040.github.io/oztools/</a>)
	<p>
</body>